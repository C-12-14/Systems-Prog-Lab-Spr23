1) /usr has r permission for all users, /root does not.

2)  $ man man
   - gives manual page for man command itself, which includes the following:
    The table below shows the section numbers of the manual followed by the types of pages they contain.

       1   Executable programs or shell commands
       2   System calls (functions provided by the kernel)
       3   Library calls (functions within program libraries)
       4   Special files (usually found in /dev)
       5   File formats and conventions, e.g. /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7), man-pages(7)
       8   System administration commands (usually only for root)
       9   Kernel routines [Non standard]

    Hence $ man printf if for the "printf" shell command, while $ man 3 printf is for the printf() function in C library.

3) Separate each command by semicolon (;).

4) using a backslash:
   ```$ ls \
   > -l```
   
5,6,7) Ctrl - D signals EOF (end of file). ^D told the shell that you weren't going to type any more commands.
       Ctrl - C means "interrupt", it terminates the command.
       
8) The first `wc` takes output of `ls -l` as its input, and the corresponding output is piped into the second `wc` as its input.

9) a)`du` estimates file space usage, but lists only space taken by directories.
   b)`du -a` writes counts for all files, not just directories.
   c)`du -s` displays only total size for each argument. If no argument given, it displays total size of curent directory.
   d)`du -sk` displays total size in KBs
   e)`du -sm` displays total size in MBs.
   f)`du -sh` displays total size in appropriate unit (KB,MB,GB).
   
*10) 'd' file type indicates directory.
    'c' file type indicates character special file.
    'l' file type indicates symbolic link.

*11) The fifth field in the output of `ls -l` specifies the number of links or directories inside this directory.
     If you create a file, its link count is 1 by default.
     If you create a directory "xyz", the default link count of it is 2. The extra count is because for every directory created, a link gets created in the parent directory to point to this new directory.
     `$ mkdir xyz`
     `$ ls -ld xyz`
     `drwxrwxr-x 2 krish krish 4096 Jan  9 14:21 xyz`
    
12) `$ vim testfile.txt` creates the required non empty file.

    `$ ls -l` 
    `-rw-rw-r-- 1 krish krish 17 Jan  9 14:29 testfile.txt`
    
    `$ ln -s testfile.txt T` creates a symbolic link 'T' to 'testfile.txt'.
    
    `$ ls -l`
    `lrwxrwxrwx 1 krish krish 12 Jan  9 14:50 T -> testfile.txt`    (T is light blue color here)
    `-rw-rw-r-- 1 krish krish 17 Jan  9 14:29 testfile.txt`
    
    `$ chmod 000 T` changes the permissions of the file which T points to (testfile.txt).
    
    If a symbolic link is deleted, its target remains unaffected.
    
    If another symbolic link 'TT' pointing to 'testfile.txt' is created and 'testfile.txt' is removed, then the symlink is not updated or deleted, and points to the old,non-existing location.
